
type UserTable @aws_iam @aws_api_key {
  id: ID!
  user_Name: String
  user_email: String
  user_comment: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserTableConnection @aws_api_key @aws_iam {
  items: [UserTable]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserTableFilterInput {
  id: ModelIDInput
  user_Name: ModelStringInput
  user_email: ModelStringInput
  user_comment: ModelStringInput
  and: [ModelUserTableFilterInput]
  or: [ModelUserTableFilterInput]
  not: ModelUserTableFilterInput
}

type Query {
  getUserTable(id: ID!): UserTable @aws_api_key @aws_iam
  listUserTables(filter: ModelUserTableFilterInput, limit: Int, nextToken: String): ModelUserTableConnection @aws_api_key @aws_iam
  syncUserTables(filter: ModelUserTableFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserTableConnection @aws_api_key @aws_iam
}

input ModelUserTableConditionInput {
  user_Name: ModelStringInput
  user_email: ModelStringInput
  user_comment: ModelStringInput
  and: [ModelUserTableConditionInput]
  or: [ModelUserTableConditionInput]
  not: ModelUserTableConditionInput
}

input CreateUserTableInput {
  id: ID
  user_Name: String
  user_email: String
  user_comment: String
  _version: Int
}

input UpdateUserTableInput {
  id: ID!
  user_Name: String
  user_email: String
  user_comment: String
  _version: Int
}

input DeleteUserTableInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUserTable(input: CreateUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
  updateUserTable(input: UpdateUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
  deleteUserTable(input: DeleteUserTableInput!, condition: ModelUserTableConditionInput): UserTable @aws_api_key @aws_iam
}

type Subscription {
  onCreateUserTable: UserTable @aws_subscribe(mutations: ["createUserTable"]) @aws_api_key @aws_iam
  onUpdateUserTable: UserTable @aws_subscribe(mutations: ["updateUserTable"]) @aws_api_key @aws_iam
  onDeleteUserTable: UserTable @aws_subscribe(mutations: ["deleteUserTable"]) @aws_api_key @aws_iam
}

